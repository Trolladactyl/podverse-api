diff --git a/node_modules/podcast-partytime/dist/parser/shared.d.ts b/node_modules/podcast-partytime/dist/parser/shared.d.ts
index f84e15b..192e267 100644
--- a/node_modules/podcast-partytime/dist/parser/shared.d.ts
+++ b/node_modules/podcast-partytime/dist/parser/shared.d.ts
@@ -13,7 +13,7 @@ export declare function firstWithAttributes<T>(maybeArr: T | T[], attrs: string[
 export declare function ensureArray<T>(maybeArr: T | T[]): T[];
 /** Gets the value of the XML node as text */
 export declare function getText(node: {
-    "#text": string;
+    "#text": string | number;
 } | string, { sanitize }?: {
     sanitize?: boolean;
 }): string;
diff --git a/node_modules/podcast-partytime/dist/parser/shared.js b/node_modules/podcast-partytime/dist/parser/shared.js
index ab73966..e6218ba 100644
--- a/node_modules/podcast-partytime/dist/parser/shared.js
+++ b/node_modules/podcast-partytime/dist/parser/shared.js
@@ -156,9 +156,15 @@ function getText(node, { sanitize = false } = {}) {
     if (typeof node === "string") {
         text = node.trim();
     }
+    else if (typeof node === "number") {
+      text = node.toString();
+    } 
     else if (typeof node !== "undefined" && node !== null && typeof node["#text"] === "string") {
         text = node["#text"].trim();
     }
+    else if (typeof node !== "undefined" && node !== null && typeof node["#text"] === "number") {
+      text = node["#text"].toString();
+    }
     if (text && sanitize) {
         text = sanitizeText(text);
     }
diff --git a/node_modules/podcast-partytime/src/parser/shared.ts b/node_modules/podcast-partytime/src/parser/shared.ts
index 73c2026..7554dd2 100644
--- a/node_modules/podcast-partytime/src/parser/shared.ts
+++ b/node_modules/podcast-partytime/src/parser/shared.ts
@@ -168,14 +168,18 @@ export function ensureArray<T>(maybeArr: T | T[]): T[] {
 
 /** Gets the value of the XML node as text */
 export function getText(
-  node: { "#text": string } | string,
+  node: { "#text": string | number } | string,
   { sanitize = false }: { sanitize?: boolean } = {}
 ): string {
   let text = "";
   if (typeof node === "string") {
     text = node.trim();
+  } else if (typeof node === "number") {
+    text = node.toString();
   } else if (typeof node !== "undefined" && node !== null && typeof node["#text"] === "string") {
     text = node["#text"].trim();
+  } else if (typeof node !== "undefined" && node !== null && typeof node["#text"] === "number") {
+    text = node["#text"].toString();
   }
   if (text && sanitize) {
     text = sanitizeText(text);
